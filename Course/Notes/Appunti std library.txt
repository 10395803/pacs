>>> Appunti sulla Standard Library

# Inizializzare un array con il default constructor della classe immagazzinata: std::array<Class,N> a{};

# La dimensione di un array deve essere nota al compile time (non può dunque essere una variabile)
Es: 	int n=2;
	std::array<int,n> a; --> KO
Es:	std::array<int,2> a; --> OK

# Il metodo get di tuple richiede un indice noto al compile time
Es:	int n=0;
	std::get<n>(nome_tuple) --> KO
Es:	std::get<0>(nome_tuple) --> OK

# Per cercare il massimo (minimo) elemento in un container: max_element (min_element) --> ritorna un iterator
Es:	int max = *std::max_element(first_it, last_it+1);

# Per eseguire la somma degli elementi di un container: std::accumulate
Es:	int sum = std::accumulate(first_it, last_it+1, valore_iniziale);

# Per inizializzare un vector tramite initializer list:
	std::vector<double> v{1.0,2.0,3.0};

# vector<float> a; --> size = capacity = 0;
# vector<float> a(10); --> size = 10, capacity >= 10, usiamo il default constructor della classe float (float()) per inizializzare gli elementi
# vector<float> a(10,3.14); --> size = 10, capacity >= 10, usiamo il copy constructor della classe float per inizializzare tutti gli elementi a 3.14
# vector<int> a{10,20}; --> creiamo un vettore di due elementi, 10 e 20
# vector<int> a(10,20); --> creiamo un vettore di 10 elementi inizializzati a 20

# Per inserire elementi alla fine di un vector:
# v.push_back(), v.push_back(value) --> non posso usarli se non ho default/copy constructor
# v.emplace_back(), v.emplace_back(parametri_constructor) --> posso usarli anche se non ho default/copy constructor
# Nota: questi due comandi potrebbero portare ad una riallocazione della memoria (nel caso in cui size+1>capacity), invalidando puntatori e iterator

# Per accedere agli elementi di un vector:
# []
# at(posizione) --> lancia un exception se posizione non rientra nel range [0,size) --> dispendioso, usarlo solo nel debugging

# v.size(): restituisce size
# vector<T>::size_type: restituisce il tipo dell'indice per accedere agli elementi --> di solito è uguale a size_t

# vector<int> v; v.reserve(n); --> fissa la capacità a n, v però è ancora vuoto --> dovrò usare push_back per inserire i valori
# vector<int> v; v.resize(n); --> fissa la size a n e utilizza il default constructor per inizializzare gli elementi --> dovrò usare [] per inserire gli elementi
# v.resize(n,value); --> modifica size ed inizializza tutti i nuovi eventuali elementi con value (copy constructor)

# Nota su resize: se la nuova dimensione è superiore a quella vecchia, i vecchi elementi rimangono inalterati, quelli nuovi vengono inizializzati con default/copy constructor
Se la nuova dimensione è inferiore a quella vecchia: cambia la size ma i valori rimangono inalterati --> il secondo argomento di resize è ininfluente
# Nota su reserve: modifica la capacità ma non la dimensione di vector o gli elementi contenuti

# a.swap(b): a e b (containers) si scambiano i contenuti --> ora a contiene quello che era contenuto in b e viceversa

# a.shrink_to_fit(): ora la capacità è pari alla dimensione (a è un container)

# Per gli iterator dei container della std library: 
	std::nome_container<template>::iterator --> begin, end
	std::nome_container<template>::const_iterator --> cbegin, cend
# Reverse iterator: rbegin, crbegin, rend, crend --> quando li aumento, in realtà tornano indietro!
# Nota: gli iterator funzionano per tutti i container, [] funzionano solo su vector e array
# Nota: un costant vector può essere scorso solo utilizzando un const_iterator

# Se dobbiamo scorrere tutti gli elementi di un container v:
	for (auto & i : v) --> & è necessaria solo se vogliamo modificare gli elementi di v
	for (auto i : v) <--> for (auto const & i : v)

# v.data() (C++11) <--> &v[0] (C++98): se v è un vector, restituisce un puntatore all'array utilizzato internamente dalla classe vector per immagazzinare i dati --> è utile se abbiamo una funzione in C che richiede in ingresso un array dinamico e noi abbiamo invece utilizzato un vector

# std::vector<T> v; v.push_front(T const &); --> aggiunge un elemento all'inizio di v

# v.clear(): cancella tutti gli elementi --> ora il container ha size=0 mentre la dimensione non è detto che cambi

# vector<T>::value_type: tipo immagazzinato dal container --> utile se si utilizzano template
# vector<T>::pointer, vector<T>::const_pointer, vector<T>::reference, vector<T>::const_reference --> puntatori e refence agli elementi immagazzinati

# Per inizializzare un array:
# std::array<double,3> a; --> array di 3 double, NON utilizza il default constructor
# std::array<double,3> a({}); --> array di 3 double, utilizza il default constructor
# std::array<double,3> a(4); --> array di 3 double inizializzati a 4
# std::array<double,3> a{2,4,6}; --> array di 3 double inizializzati con 2,4,6
--> per altre info: Examples/src/Array/main_array.cpp

# size() valuta la dimensione di un array al runtime
# Per conoscere la dimensione di un array al compile time --> questione di efficienza:
	std::tuple_size<tipo_array>::value
--> Funziona con gli array, non con i vector (o comunque con container dinamici)

# IMPORTANTE!!!
# Unique ptr e array:
	std::unique_ptr<string> p(new string[10]); KO
	std::unique_ptr<string[]> p(new string[10]); OK

# vector<int> i ={1,2,3,4,5};
  vector<int> j;
  transform (i.cbegin(), i.cend(), back_inserter(j), negate<int>());
# back_inserter: functor equivalente a push_back
# negate: functor che restituisce l'opposto di un numero

# Per salvare delle reference in uno std container:
	std::vector<std::refernce_wrapper<T>> v;
	v.push_back(t1);
	v.push_back(t2);
	// Se ora modifichiamo t1, modifichiamo anche v[0] perchè è una
	// reference

# Come utilizzare bind:
double fun(double a, double b){return a*b;}
auto f=bind(fun,3.0,std::placeholders::_1); 
cout<<f(4); --> in questo modo è come se chiamassimo f(3.0,4)
--> bind consente di "fissare" alcuni argomenti di una funzione/functor/lambda e creare così una nuova funzione/functor/lambda
--> std::placeholders sono gli argomenti che non fissiamo ora ma che passeremo di volta in volta

# Per creare un container di funzioni: utilizziamo std::function<>
# std::function<tipo_restituito(tipo_parametri)
Es:	int fun(int,int);
	vector<std::function<int(int,int)>> tasks;
	tasks.push_back(fun);
	tasks.push_back([](int x, int y){return x*y;});
	for (auto i : tasks) cout << i(3,4) << endl;
--> Creiamo un vector di due elementi che sono funzioni riceventi due int e restituenti un int (una funzione predefinita e una lambda), il ciclo for stampa a video i risultati delle chiamate alle due funzioni

# std::cout.setf(std::ios::scientific): per settare la notazione scientifica

# std::toupper(char): trasforma un char in maiuscolo (nel caso in cui non lo sia)

# Per inserire un elemento in una map:
	auto res = nome_map.insert(std::make_pair(key,value));
--> insert restituisce pair(iterator,bool): se la key non è già presente nella mappa, restuisce (iterator all'elemento aggiunto, true), se la key è già presente (iterator all'elemento già presente, false)

# Algoritmo unique: riceve in ingresso due iteratori e va a "cancellare" tutti gli elementi consecutivi uguali (tranne il primo) andando a sovrascrivere il container. Ritorna un iterator alla posizione che ora dovrebbe essere (end+1)

# Metodo assign: due versioni
	v.assign(size, value); 
	--> impongo la dimensione e pongo tutti gli elementi pari a value
	v.assign(first_iterator, last_iterator);
	--> copio in v gli elementi di un altro container (la dimensione 	            viene dedotta)
# In entrambi i casi, la dimensione viene modificata adeguatamente

# Algoritmo replace:
	replace(first_iterator, last_iterator, old_value, new_value)
	--> tutte le volte che compare old_value, ci sostituisce 	    	    new_value, se old_value non compare mai non fa nulla

# Algoritmo set_difference: dati in ingresso due container ordinati e un terzo container, riempie quest'ultimo con la differenza tra il primo ed il secondo:
OutputIterator set_difference
(InputIterator1 first1, InputIterator1 last1,
 InputIterator2 first2, InputIterator2 last2, OutputIterator result);

# Algoritmo set_intersection: dati in ingresso due container ordinati e un terzo container, riempie quest'ultimo con l'intersezione tra il primo ed il secondo:
OutputIterator set_intersection
(InputIterator1 first1, InputIterator1 last1,
 InputIterator2 first2, InputIterator2 last2, OutputIterator result);

# Algoritmo equal: confronta due container tramite operator==, ritorna un bool:
	equal(v1.begin(), v1.end(), v2.begin())

